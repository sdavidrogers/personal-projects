package com.sg.superherosightings.dao;

import com.sg.superherosightings.dto.Organization;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;


public class OrganizationDaoJdbcImpl implements OrganizationDao {
    
    
    
    private static final String SQL_INSERT_ORGANIZATION
            = "insert into Organizations "
            + "(OrganizationName, Description, Address, Phone) "
            + "values (?, ?, ?, ?)";
    
    private static final String SQL_DELETE_ORGANIZATION
            = "delete from Organizations where OrganizationID = ?";
    
    private static final String SQL_SELECT_ORGANIZATION
            = "select * from Organizations where OrganizationID = ?";
    
    private static final String SQL_UPDATE_ORGANIZATION
            = "update Organizations set "
            + "OrganizationName = ?, Description = ?, Address = ?, "
            + "Phone = ? "
            + "where OrganizationID = ?";
    
    private static final String SQL_SELECT_ALL_ORGANIZATIONS
            = "select * from Organizations";
    
    private static final String SQL_SELECT_ORGANIZATIONS_BY_SUPER
            = "select so.OrganizationID, o.OrganizationName, o.Description, " 
            + "o.Address, o.Phone "
            + "from SupersAndOrganizations so "
            + "inner join Organizations o "
            + "on so.OrganizationID = o.OrganizationID "
            + "where SuperID = ?";

    
    
    private JdbcTemplate jdbcTemplate;

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }
    
    
    
    @Override
    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public Organization addOrganization(Organization organization) {
        jdbcTemplate.update(SQL_INSERT_ORGANIZATION,
                organization.getOrganizationName(),
                organization.getDescription(),
                organization.getAddress(),
                organization.getPhone());
        int newId = jdbcTemplate.queryForObject("select LAST_INSERT_ID()", Integer.class);
        organization.setOrganizationId(newId);
        return organization;
    }

    
    
    @Override
    public void removeOrganization(long organizationId) {
        jdbcTemplate.update(SQL_DELETE_ORGANIZATION, organizationId);
    }

    
    
    @Override
    public void updateOrganization(Organization organization) {
        jdbcTemplate.update(SQL_UPDATE_ORGANIZATION,
                organization.getOrganizationName(),
                organization.getDescription(),
                organization.getAddress(),
                organization.getPhone(),
                organization.getOrganizationId());
    }

    
    
    @Override
    public List<Organization> getAllOrganizations() {
        return jdbcTemplate.query(SQL_SELECT_ALL_ORGANIZATIONS, 
                new OrganizationMapper());
    }

    
    
    @Override
    public Organization getOrganizationById(long organizationId) {
        try {
            return jdbcTemplate.queryForObject(SQL_SELECT_ORGANIZATION,
                    new OrganizationMapper(), organizationId);
        } catch (EmptyResultDataAccessException ex) {
            return null;
        }
    }

    
    
    @Override
    public List<Organization> getAllOrganizationsForSuper(long superId) {
        return jdbcTemplate.query(SQL_SELECT_ORGANIZATIONS_BY_SUPER, 
                new OrganizationMapper(), superId);
    }
    
    
    
    private static final class OrganizationMapper implements RowMapper<Organization> {
        @Override
        public Organization mapRow(ResultSet rs, int rowNum) throws SQLException {
            Organization organization = new Organization();
            organization.setOrganizationId(rs.getLong("OrganizationID"));
            organization.setOrganizationName(rs.getString("OrganizationName"));
            organization.setDescription(rs.getString("Description"));
            organization.setAddress(rs.getString("Address"));
            organization.setPhone(rs.getString("Phone"));
            return organization;
        }
    }
    
}
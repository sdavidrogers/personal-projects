package com.sg.superherosightings.dao;

import com.sg.superherosightings.dto.Location;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;


public class LocationDaoJdbcImpl implements LocationDao {
    
    
    
    private static final String SQL_INSERT_LOCATION
            = "insert into Locations "
            + "(LocationName, Description, Address, Latitude, Longitude) "
            + "values (?, ?, ?, ?, ?)";
    
    private static final String SQL_DELETE_LOCATION
            = "delete from Locations where LocationID = ?";
    
    private static final String SQL_SELECT_LOCATION
            = "select * from Locations where LocationID = ?";
    
    private static final String SQL_UPDATE_LOCATION
            = "update Locations set "
            + "LocationName = ?, Description = ?, Address = ?, "
            + "Latitude = ?, Longitude = ? "
            + "where LocationID = ?";
    
    private static final String SQL_SELECT_ALL_LOCATIONS
            = "select * from Locations";
    
    private static final String SQL_SELECT_LOCATIONS_BY_SUPER
            = "select distinct s.LocationID, l.LocationName, l.Description, "
            + "l.Address, l.Latitude, l.Longitude "
            + "from SupersAndSightings ss "
            + "inner join Sightings s "
            + "on ss.SightingID = s.SightingID "
            + "inner join Locations l "
            + "on s.LocationID = l.LocationID "
            + "where SuperID = ?";
    
    
    
    private JdbcTemplate jdbcTemplate;

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    
    
    @Override
    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
    public Location addLocation(Location location) {
        jdbcTemplate.update(SQL_INSERT_LOCATION,
                location.getLocationName(),
                location.getDescription(),
                location.getAddress(),
                location.getLatitude(),
                location.getLongitude());
        int newId = jdbcTemplate.queryForObject("select LAST_INSERT_ID()", Integer.class);
        location.setLocationId(newId);
        return location;
    }

    
    
    @Override
    public void removeLocation(long locationId) {
        jdbcTemplate.update(SQL_DELETE_LOCATION, locationId);
    }

    
    
    @Override
    public void updateLocation(Location location) {
        jdbcTemplate.update(SQL_UPDATE_LOCATION,
                location.getLocationName(),
                location.getDescription(),
                location.getAddress(),
                location.getLatitude(),
                location.getLongitude(),
                location.getLocationId());
    }

    
    
    @Override
    public List<Location> getAllLocations() {
        return jdbcTemplate.query(SQL_SELECT_ALL_LOCATIONS, new LocationMapper());
    }

    
    
    @Override
    public Location getLocationById(long locationId) {
        try {
            return jdbcTemplate.queryForObject(SQL_SELECT_LOCATION,
                    new LocationMapper(), locationId);
        } catch (EmptyResultDataAccessException ex) {
            return null;
        }
    }

    
    
    @Override
    public List<Location> getAllLocationsFromSuper(long superId) {
        return jdbcTemplate.query(SQL_SELECT_LOCATIONS_BY_SUPER, 
                new LocationMapper(), superId);
    }
    
    
    
    private static final class LocationMapper implements RowMapper<Location> {
        @Override
        public Location mapRow(ResultSet rs, int rowNum) throws SQLException {
            Location location = new Location();
            location.setLocationId(rs.getLong("LocationID"));
            location.setLocationName(rs.getString("LocationName"));
            location.setDescription(rs.getString("Description"));
            location.setAddress(rs.getString("Address"));
            location.setLatitude(rs.getDouble("Latitude"));
            location.setLongitude(rs.getDouble("Longitude"));
            return location;
        }
    }
    
}
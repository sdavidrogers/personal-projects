package com.sg.superherosightings.service;

import com.sg.superherosightings.dto.Organization;
import com.sg.superherosightings.dto.Super;
import java.util.ArrayList;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class OrganizationServiceJdbcImplTest {
    
    private OrganizationService organizationService;
    private SuperService superService;
    
    public OrganizationServiceJdbcImplTest() {
        ApplicationContext ctx = new ClassPathXmlApplicationContext("test-applicationContext.xml");
        organizationService = ctx.getBean("organizationService", OrganizationService.class);
        superService = ctx.getBean("superService", SuperService.class);
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
        for (Organization currentOrganization : organizationService.getAllOrganizations()) {
            organizationService.removeOrganization(currentOrganization.getOrganizationId());
        }
        
        for (Super currentSuper : superService.getAllSupers()) {
            superService.removeSuper(currentSuper.getSuperId());
        }
    }
    
    @After
    public void tearDown() {
        for (Organization currentOrganization : organizationService.getAllOrganizations()) {
            organizationService.removeOrganization(currentOrganization.getOrganizationId());
        }
        
        for (Super currentSuper : superService.getAllSupers()) {
            superService.removeSuper(currentSuper.getSuperId());
        }
    }


    @Test
    public void testAddGetOrganization() {
        Organization organization = new Organization();
        organization.setOrganizationName("The Bad Guys");
        organization.setDescription("Group for bad guys.");
        organization.setAddress("666 Bad Boy Lane");
        organization.setPhone("330-612-8177");
        
        organization = organizationService.addOrganization(organization);
        assertEquals(organization, organizationService.getOrganizationById(organization.getOrganizationId()));
    }


    @Test
    public void testRemoveOrganization() {
        Organization organization = new Organization();
        organization.setOrganizationName("The Bad Guys");
        organization.setDescription("Group for bad guys.");
        organization.setAddress("666 Bad Boy Lane");
        organization.setPhone("330-612-8177");
        
        organization = organizationService.addOrganization(organization);
        assertEquals(organization, organizationService.getOrganizationById(organization.getOrganizationId()));
        organizationService.removeOrganization(organization.getOrganizationId());
        assertNull(organizationService.getOrganizationById(organization.getOrganizationId()));
    }


    @Test
    public void testUpdateOrganization() {
        Organization organization = new Organization();
        organization.setOrganizationName("The Bad Guys");
        organization.setDescription("Group for bad guys.");
        organization.setAddress("666 Bad Boy Lane");
        organization.setPhone("330-612-8177");
        
        organization = organizationService.addOrganization(organization);
        organization.setOrganizationName("The Really Bad Guys");
        organizationService.updateOrganization(organization);
        assertEquals(organization, organizationService.getOrganizationById(organization.getOrganizationId()));
    }


    @Test
    public void testGetAllOrganizations() {
        Organization organization = new Organization();
        organization.setOrganizationName("The Bad Guys");
        organization.setDescription("Group for bad guys.");
        organization.setAddress("666 Bad Boy Lane");
        organization.setPhone("330-612-8177");
        organizationService.addOrganization(organization);
        
        Organization organizationTwo = new Organization();
        organizationTwo.setOrganizationName("The Good Guys");
        organizationTwo.setDescription("Group for good guys.");
        organizationTwo.setAddress("667 Good Boy Lane");
        organizationTwo.setPhone("330-612-8178");
        organizationService.addOrganization(organizationTwo);
        
        assertEquals(2, organizationService.getAllOrganizations().size());
    }


    @Test
    public void testGetAllOrganizationsForSuper() {
        List<Organization> organizations = new ArrayList<>();
        List<Super> members = new ArrayList<>();
        
        Super addSuper = new Super();
        addSuper.setAlias("Bad Boy");
        addSuper.setSuperType("Villain");
        addSuper.setDescription("One bad boy.");
        addSuper = superService.addSuper(addSuper);
        members.add(addSuper);
        
        Organization organization = new Organization();
        organization.setOrganizationName("The Bad Guys");
        organization.setDescription("Group for bad guys.");
        organization.setAddress("666 Bad Boy Lane");
        organization.setPhone("330-612-8177");
        organization.setMembers(members);
        organization = organizationService.addOrganization(organization);
        organizations.add(organization);
        
        Organization organizationTwo = new Organization();
        organizationTwo.setOrganizationName("The Good Guys");
        organizationTwo.setDescription("Group for good guys.");
        organizationTwo.setAddress("667 Good Boy Lane");
        organizationTwo.setPhone("330-612-8178");
        organizationTwo.setMembers(members);
        organizationTwo = organizationService.addOrganization(organizationTwo);
        organizations.add(organizationTwo);
        
        assertEquals(organizations, organizationService.getAllOrganizationsForSuper(addSuper.getSuperId()));
    }
    
}
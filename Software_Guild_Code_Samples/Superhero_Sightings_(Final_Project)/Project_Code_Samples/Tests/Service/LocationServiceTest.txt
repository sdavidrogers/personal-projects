package com.sg.superherosightings.service;

import com.sg.superherosightings.dto.Location;
import com.sg.superherosightings.dto.Sighting;
import com.sg.superherosightings.dto.Super;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class LocationServiceJdbcImplTest {
    
    private LocationService locationService;
    private SightingService sightingService;
    private SuperService superService;
    
    public LocationServiceJdbcImplTest() {
        ApplicationContext ctx = new ClassPathXmlApplicationContext("test-applicationContext.xml");
        locationService = ctx.getBean("locationService", LocationService.class);
        sightingService = ctx.getBean("sightingService", SightingService.class);
        superService = ctx.getBean("superService", SuperService.class);
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
        for (Location currentLocation : locationService.getAllLocations()) {
            locationService.removeLocation(currentLocation.getLocationId());
        }
        
        for (Sighting currentSighting : sightingService.getAllSightings()) {
            sightingService.removeSighting(currentSighting.getSightingId());
        }
        
        for (Super currentSuper : superService.getAllSupers()) {
            superService.removeSuper(currentSuper.getSuperId());
        }
    }
    
    @After
    public void tearDown() {
        for (Location currentLocation : locationService.getAllLocations()) {
            locationService.removeLocation(currentLocation.getLocationId());
        }
        
        for (Sighting currentSighting : sightingService.getAllSightings()) {
            sightingService.removeSighting(currentSighting.getSightingId());
        }
        
        for (Super currentSuper : superService.getAllSupers()) {
            superService.removeSuper(currentSuper.getSuperId());
        }
    }

    @Test
    public void testAddGetLocation() {
        Location location = new Location();
        location.setLocationName("My house");
        location.setDescription("My beautiful house");
        location.setAddress("4059 St. Clair Avenue");
        location.setLatitude(10);
        location.setLongitude(8);
        location = locationService.addLocation(location);
        
        assertEquals(location, locationService.getLocationById(location.getLocationId()));
    }

    @Test
    public void testRemoveLocation() {
        Location location = new Location();
        location.setLocationName("My house");
        location.setDescription("My beautiful house");
        location.setAddress("4059 St. Clair Avenue");
        location.setLatitude(10);
        location.setLongitude(8);
        location = locationService.addLocation(location);
        
        assertEquals(location, locationService.getLocationById(location.getLocationId()));
        locationService.removeLocation(location.getLocationId());
        assertNull(locationService.getLocationById(location.getLocationId()));
    }

    @Test
    public void testUpdateLocation() {
        Location location = new Location();
        location.setLocationName("My house");
        location.setDescription("My beautiful house");
        location.setAddress("4059 St. Clair Avenue");
        location.setLatitude(10);
        location.setLongitude(8);
        location = locationService.addLocation(location);
        
        location.setAddress("2220 Tamarisk Ct.");
        locationService.updateLocation(location);
        assertEquals(location, locationService.getLocationById(location.getLocationId()));
    }

    @Test
    public void testGetAllLocations() {
        Location location = new Location();
        location.setLocationName("My house");
        location.setDescription("My beautiful house");
        location.setAddress("4059 St. Clair Avenue");
        location.setLatitude(10);
        location.setLongitude(8);
        locationService.addLocation(location);
        
        Location locationTwo = new Location();
        locationTwo.setLocationName("My house");
        locationTwo.setDescription("My beautiful house");
        locationTwo.setAddress("4059 St. Clair Avenue");
        locationTwo.setLatitude(10);
        locationTwo.setLongitude(8);
        locationService.addLocation(locationTwo);
        
        assertEquals(2, locationService.getAllLocations().size());
    }

    @Test
    public void testGetAllLocationsFromSuper() {
        List<Location> locations = new ArrayList<>();
        List<Super> supers = new ArrayList<>();
        
        Super addSuper = new Super();
        addSuper.setAlias("Bad Boy");
        addSuper.setSuperType("Villain");
        addSuper.setDescription("One bad boy.");
        addSuper = superService.addSuper(addSuper);
        supers.add(addSuper);
        
        Location location = new Location();
        location.setLocationName("My house");
        location.setDescription("My beautiful house");
        location.setAddress("4059 St. Clair Avenue");
        location.setLatitude(10);
        location.setLongitude(8);
        location = locationService.addLocation(location);
        locations.add(location);
        
        Location locationTwo = new Location();
        locationTwo.setLocationName("My house");
        locationTwo.setDescription("My beautiful house");
        locationTwo.setAddress("4059 St. Clair Avenue");
        locationTwo.setLatitude(10);
        locationTwo.setLongitude(8);
        locationTwo = locationService.addLocation(locationTwo);
        locations.add(locationTwo);
        
        Sighting sighting = new Sighting();
        sighting.setLocation(location);
        sighting.setSightingDate(LocalDate.parse("1991-11-08"));
        sighting.setSupers(supers);
        sightingService.addSighting(sighting);
        
        Sighting sightingTwo = new Sighting();
        sightingTwo.setLocation(locationTwo);
        sightingTwo.setSightingDate(LocalDate.parse("1991-11-09"));
        sightingTwo.setSupers(supers);
        sightingService.addSighting(sightingTwo);
        
        assertEquals(locations, locationService.getAllLocationsFromSuper(addSuper.getSuperId()));
    }
    
}